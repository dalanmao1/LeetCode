#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
/**
 * 36. 有效的数独
 * 请你判断一个?9 x 9 的数独是否有效。只需要 根据以下规则 ，验证已经填入的数字是否有效即可。
 * 数字?1-9?在每一行只能出现一次。
 * 数字?1-9?在每一列只能出现一次。
 * 数字?1-9?在每一个以粗实线分隔的?3x3?宫内只能出现一次。（请参考示例图）
 * 注意：一个有效的数独（部分已被填充）不一定是可解的。只需要根据以上规则，验证已经填入的数字是否有效即可。空白格用?'.'?表示。
 */

/**解答
 * 建立两个二维数组，分别记录每一行，每一列0到9数字的出现个数，
 * 然后再建立一个三维数组，记录每一个小的九宫格1到9出现数字出现的次数，
 * 遍历board，当数值不为空时，对相应的数值++，判断数组的值是否大于1就可得到数独是否合格
 */

class Solution
{
public:
    bool isValidSudoku(vector<vector<char>> &board)
    {
        int row[9][9] = {0};
        int column[9][9] = {0};
        int small[3][3][9] = {0}; //每个小三格中1-9出现的次数
        int value = 0;
        for (int i = 0; i < 9; ++i)
        {
            for (int j = 0; j < 9; ++j)
            {

                if (board[i][j] == '.')
                {
                    continue;
                }
                else
                {
                    value = board[i][j] - '0' - 1; //注意要-1和-‘0’，j的范围只有0-8
                    ++row[i][value];
                    ++column[j][value];
                    ++small[i / 3][j / 3][value];
                    if (row[i][value] > 1 || column[j][value] > 1 || small[i / 3][j / 3][value] > 1)
                    {
                        return 0;
                    }
                }
            }
        }
        return 1;
    }
};

int main(int argc, char const *argv[])
{
    vector<vector<char>> board = {{'5', '3', '.', '.', '7', '.', '.', '.', '.'}, {'6', '.', '.', '1', '9', '5', '.', '.', '.'}, {'.', '9', '8', '.', '.', '.', '.', '6', '.'}, {'8', '.', '.', '.', '6', '.', '.', '.', '3'}, {'4', '.', '.', '8', '.', '3', '.', '.', '1'}, {'7', '.', '.', '.', '2', '.', '.', '.', '6'}, {'.', '6', '.', '.', '.', '.', '2', '8', '.'}, {'.', '.', '.', '4', '1', '9', '.', '.', '5'}, {'.', '.', '.', '.', '8', '.', '.', '7', '9'}};
    Solution sol;
    cout << sol.isValidSudoku(board);
    return 0;
}
